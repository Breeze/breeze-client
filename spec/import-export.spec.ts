import { Entity, EntityQuery, EntityType, MetadataStore, Predicate, breeze, MergeStrategy, DataProperty, NavigationProperty, core, QueryOptions, EntityManager, EntityKey, RelationArray } from 'breeze-client';
import { TestFns, skipTestIf, skipDescribeIf } from './test-fns';

// function ok(a: any, b?: any) {
//   throw new Error('for test conversion purposes');
// }

TestFns.initServerEnv();

beforeAll(async () => {
  await TestFns.initDefaultMetadataStore();

});

describe("EntityManager import/export", () => {

  test("export/import with tempkey", function () {
    const DT = breeze.DataType;
    const newMs = new MetadataStore();
    initializeMetadataStore(newMs);
    const em1 = new EntityManager({ metadataStore: newMs });
    const emp1 = em1.createEntity("Employee");
    expect(emp1.entityAspect.hasTempKey).toBe(true);
    let exportedEnts = em1.exportEntities();

    DT._resetConstants();
    const em2 = new EntityManager();
    const r2 = em2.importEntities(exportedEnts);
    expect(r2.entities.every( r => r.entityAspect.hasTempKey)).toBe(true);
    
    const emp2 = em2.createEntity("Employee");
    expect(emp2.entityAspect.hasTempKey).toBe(true);
    exportedEnts = em2.exportEntities();

    DT._resetConstants();
    const em3 = new EntityManager();
    const r3 = em3.importEntities(exportedEnts);
    expect(r3.entities.every( r =>r.entityAspect.hasTempKey ));
    const emp3 = em3.createEntity("Employee");
    expect(emp3.entityAspect.hasTempKey).toBe(true);
    expect(em3.getEntities().length).toBe(3);
  });

  function initializeMetadataStore(metadataStore: MetadataStore) {
    const DT = breeze.DataType;

    metadataStore.addEntityType({
      shortName: "Employee",
      namespace: "Context",
      autoGeneratedKeyType: breeze.AutoGeneratedKeyType.Identity,
      dataProperties: {
        id: { 
          dataType: DT.Int64, 
          isPartOfKey: true 
        },
        name: {
          dataType: DT.String
        }
      }
    });
    metadataStore.setEntityTypeForResourceName('Employee', 'Employee');
  }



});
